{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to the FrangipaneTeam Terraform Framework Validators documentation site This repository contains a collections of validators for the Terraform Plugin Framework.</p>"},{"location":"#validators","title":"Validators","text":"<ul> <li>StringValidator</li> <li>BoolValidator</li> <li>Int64Validator</li> <li>ListValidator</li> <li>SetValidator</li> <li>MapValidator</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>For installing the validators, you can use the <code>go get</code> command:</p> <pre><code>go get github.com/FrangipaneTeam/terraform-plugin-framework-validators@latest\n</code></pre>"},{"location":"boolvalidator/","title":"BoolValidator","text":"<p>Bool validator are used to validate the plan of a boolean attribute. It will be used into the <code>Validators</code> field of the <code>schema.BoolAttribute</code> struct.</p>"},{"location":"boolvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfboolvalidator \"github.com/FrangipaneTeam/terraform-plugin-framework-validators/boolvalidator\"\n)\n</code></pre>"},{"location":"boolvalidator/#list-of-validators","title":"List of Validators","text":""},{"location":"boolvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"boolvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"boolvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"enabled\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable ...\",\nValidators: []validator.String{\nfstringvalidator.Not(fstringvalidator.IsValidIP())\n},\n},\n</code></pre>"},{"location":"int64validator/","title":"Int64Validator","text":"<p>Int64 validator are used to validate the plan of a int64 attribute. It will be used into the <code>Validators</code> field of the <code>schema.Int64Attribute</code> struct.</p>"},{"location":"int64validator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfint64validator \"github.com/FrangipaneTeam/terraform-plugin-framework-validators/int64validator\"\n)\n</code></pre>"},{"location":"int64validator/#list-of-validators","title":"List of Validators","text":""},{"location":"int64validator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"int64validator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"int64validator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"count\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"Count of ...\",\nValidators: []validator.Int64{\nfint64validator.Not(int64validator.Between(10,20))\n},\n},\n</code></pre>"},{"location":"listvalidator/","title":"ListValidator","text":"<p>List validator are used to validate the plan of a list attribute. It will be used into the <code>Validators</code> field of the <code>schema.ListAttribute</code> struct.</p>"},{"location":"listvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nflistvalidator \"github.com/FrangipaneTeam/terraform-plugin-framework-validators/listvalidator\"\n)\n</code></pre>"},{"location":"listvalidator/#list-of-validators","title":"List of Validators","text":""},{"location":"listvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"listvalidator/#generic","title":"Generic","text":""},{"location":"listvalidator/#string","title":"String","text":"<p>Hashicorp provides a generic validator for strings. It uses the validators already defined in string to validate a list of strings. It is available in the hashicorp stringvalidator package.</p> <p>Example of usage:</p> <pre><code>// Used within a Schema method of a DataSource, Provider, or Resource\n_ = schema.Schema{\nAttributes: map[string]schema.Attribute{\n\"example_attr\": schema.ListAttribute{\nElementType: types.StringType,\nRequired:    true,\nValidators: []validator.List{\n// Validate this List must contain string values which are at least 3 characters.\nlistvalidator.ValueStringsAre(fstringvalidator.IsUUID()),\n},\n},\n},\n}\n</code></pre>"},{"location":"listvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"listvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"list_of\": schema.ListAttribute{\nOptional:            true,\nMarkdownDescription: \"List of ...\",\nValidators: []validator.List{\nflistvalidator.Not(listvalidator.Between(10,20))\n},\n},\n</code></pre>"},{"location":"mapvalidator/","title":"MapValidator","text":"<p>Map validator are used to validate the plan of a map attribute. It will be used into the <code>Validators</code> field of the <code>schema.MapAttribute</code> struct.</p>"},{"location":"mapvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfmapvalidator \"github.com/FrangipaneTeam/terraform-plugin-framework-validators/mapvalidator\"\n)\n</code></pre>"},{"location":"mapvalidator/#list-of-validators","title":"List of Validators","text":""},{"location":"mapvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"mapvalidator/#string","title":"String","text":"<p>Hashicorp provides a generic validator for strings. It uses the validators already defined in string to validate a list of strings. It is available in the hashicorp stringvalidator package.</p> <p>Example of usage:</p> <pre><code>    // Used within a Schema method of a DataSource, Provider, or Resource\n_ = schema.Schema{\nAttributes: map[string]schema.Attribute{\n\"example_attr\": schema.MapAttribute{\nElementType: types.StringType,\nRequired:    true,\nValidators: []validator.Map{\n// Validate this Map must contain string values which are at least 3 characters.\nmapvalidator.ValueStringsAre(fstringvalidator.IsUUID()),\n},\n},\n},\n}\n</code></pre>"},{"location":"mapvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"mapvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"map_of\": schema.MapAttribute{\nOptional:            true,\nMarkdownDescription: \"Map of ...\",\nValidators: []validator.Map{\nfmapvalidator.Not(mapvalidator.Between(10,20))\n},\n},\n</code></pre>"},{"location":"setvalidator/","title":"SetValidator","text":"<p>Set validator are used to validate the plan of a set attribute. It will be used into the <code>Validators</code> field of the <code>schema.SetAttribute</code> struct.</p>"},{"location":"setvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfmapvalidator \"github.com/FrangipaneTeam/terraform-plugin-framework-validators/mapvalidator\"\n)\n</code></pre>"},{"location":"setvalidator/#list-of-validators","title":"List of Validators","text":"<p>Every <code>string</code> validators are available for maps thanks to a generic validator provided by Hashicorp. See the section below for more details.</p>"},{"location":"setvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"setvalidator/#generic","title":"Generic","text":""},{"location":"setvalidator/#string","title":"String","text":"<p>Hashicorp provides a generic validator for strings. It uses the validators already defined in string to validate a list of strings. It is available in the hashicorp stringvalidator package.</p> <p>Example of usage:</p> <pre><code>_ = schema.Schema{\nAttributes: map[string]schema.Attribute{\n\"example_attr\": schema.SetAttribute{\nElementType: types.StringType,\nRequired:    true,\nValidators: []validator.Set{\n// Validate this Set must contain string values which are URNs.\nsetvalidator.ValueStringsAre(fstringvalidator.IsURN())\n},\n},\n},\n}\n</code></pre>"},{"location":"setvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"setvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"set_of\": schema.SetAttribute{\nOptional:            true,\nMarkdownDescription: \"Set of ...\",\nValidators: []validator.Set{\nfsetvalidator.Not(setvalidator.Between(10,20))\n},\n},\n</code></pre>"},{"location":"stringvalidator/","title":"StringValidator","text":"<p>String validator are used to validate the plan of a string attribute. It will be used into the <code>Validators</code> field of the <code>schema.StringAttribute</code> struct.</p>"},{"location":"stringvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfstringvalidator \"github.com/FrangipaneTeam/terraform-plugin-framework-validators/stringvalidator\"\n)\n</code></pre>"},{"location":"stringvalidator/#list-of-validators","title":"List of Validators","text":""},{"location":"stringvalidator/#network","title":"Network","text":"<ul> <li><code>IsIP</code> - This validator is used to check if the string is a valid IP address.</li> <li><code>IsNetmask</code> - This validator is used to check if the string is a valid netmask.</li> <li><code>IsMacAddress</code> - This validator is used to check if the string is a valid MAC address.</li> </ul>"},{"location":"stringvalidator/#string","title":"String","text":"<ul> <li><code>IsURN</code> - This validator is used to check if the string is a valid URN.</li> <li><code>IsUUID</code> - This validator is used to check if the string is a valid UUID.</li> </ul>"},{"location":"stringvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"stringvalidator/isip/","title":"<code>IsIP</code>","text":"<p>Released in v1.1.0</p> <p>This validator is used to check if the string is a valid IP address.</p>"},{"location":"stringvalidator/isip/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"ip_address\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"IPV4 for ...\",\nValidators: []validator.String{\nfstringvalidator.IsIP()\n},\n},\n</code></pre>"},{"location":"stringvalidator/ismacaddress/","title":"<code>IsMacAddress</code>","text":"<p>Released in v1.2.0</p> <p>This validator is used to check if the string is a valid Mac Address.</p>"},{"location":"stringvalidator/ismacaddress/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"mac_address\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Mac Adresse for ...\",\nValidators: []validator.String{\nfstringvalidator.IsMacAddress()\n},\n},\n</code></pre>"},{"location":"stringvalidator/isnetmask/","title":"<code>IsNetmask</code>","text":"<p>Released in v1.1.0</p> <p>This validator is used to check if the string is a valid netmask.</p>"},{"location":"stringvalidator/isnetmask/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"netmask\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Netmask for ...\",\nValidators: []validator.String{\nfstringvalidator.IsValidNetmask()\n},\n},\n</code></pre>"},{"location":"stringvalidator/isurn/","title":"<code>IsURN</code>","text":"<p>Released in v1.1.0</p> <p>This validator is used to check if the string is a valid URN.</p>"},{"location":"stringvalidator/isurn/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"vm_id\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"The VM ID for ...\",\nValidators: []validator.String{\nfstringvalidator.IsValidURN()\n},\n},\n</code></pre>"},{"location":"stringvalidator/isuuid/","title":"<code>IsUUID</code>","text":"<p>Released in v1.1.0</p> <p>This validator is used to check if the string is a valid (v4) UUID.</p>"},{"location":"stringvalidator/isuuid/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"vm_id\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"The VM ID for ...\",\nValidators: []validator.String{\nfstringvalidator.IsValidUUID()\n},\n},\n</code></pre>"},{"location":"stringvalidator/isvalidip/","title":"<code>IsValidIP</code>","text":"<p>Deprecated</p> <p>Use IsIP instead.</p> <p>This validator is used to check if the string is a valid IP address.</p>"},{"location":"stringvalidator/isvalidip/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"ip_address\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"IPV4 for ...\",\nValidators: []validator.String{\nfstringvalidator.IsValidIP()\n},\n},\n</code></pre>"},{"location":"stringvalidator/isvalidnetmask/","title":"<code>IsValidNetmask</code>","text":"<p>Deprecated</p> <p>Use IsNetmask instead.</p> <p>This validator is used to check if the string is a valid netmask.</p>"},{"location":"stringvalidator/isvalidnetmask/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"netmask\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Netmask for ...\",\nValidators: []validator.String{\nfstringvalidator.IsValidNetmask()\n},\n},\n</code></pre>"},{"location":"stringvalidator/isvalidurn/","title":"<code>IsValidURN</code>","text":"<p>Deprecated</p> <p>Use IsURN instead.</p> <p>This validator is used to check if the string is a valid URN.</p>"},{"location":"stringvalidator/isvalidurn/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"vm_id\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"The VM ID for ...\",\nValidators: []validator.String{\nfstringvalidator.IsValidURN()\n},\n},\n</code></pre>"},{"location":"stringvalidator/isvaliduuid/","title":"<code>IsValidUUID</code>","text":"<p>Deprecated</p> <p>Use IsUUID instead.</p> <p>This validator is used to check if the string is a valid (v4) UUID.</p>"},{"location":"stringvalidator/isvaliduuid/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"vm_id\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"The VM ID for ...\",\nValidators: []validator.String{\nfstringvalidator.IsValidUUID()\n},\n},\n</code></pre>"},{"location":"stringvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"stringvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"ip_address\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"IPV4 for ...\",\nValidators: []validator.String{\nfstringvalidator.Not(fstringvalidator.IsValidIP())\n},\n},\n</code></pre>"}]}